import { marked } from "marked"; // Import the markdown converter

console.log("markdown-editor.js loaded");

// This block of code was generated by OpenAI, ChatGPT o1-mini,
// Prompt: How do I set all the image from markdown to have a fixed width and height?

// ChatGPT code starts here

// Step 1: Create a custom renderer for marked
const renderer = new marked.Renderer();

renderer.image = function (href, title, text) {
  // Check if href is an object with an href property
  if (href && typeof href.href === "string") {
    const width = 300; // Desired width in pixels
    const height = 200; // Desired height in pixels

    // Build the image HTML with fixed dimensions
    let img = `<br><img src="${href.href}" alt="${text}" width="${width}" height="${height}"`;

    if (title) {
      img += ` title="${title}"`;
    }

    img += " /><br>";

    return img;
  } else {
    console.error("Invalid href passed to renderer.image: ", href);
    return ""; // Return an empty string if href is not valid
  }
};

// Step 2: Configure marked to use the custom renderer
marked.setOptions({
  renderer: renderer,
  // You can include other options here as needed
});

// ChatGPT code ends here

// Handle Markdown conversion and rendering for the Create Post page
const convertBtn = document.getElementById('convert-btn');

if (convertBtn) {
  convertBtn.addEventListener('click', e => {
    e.preventDefault(); // Prevent the default form submission
    const markdownText = document.getElementById('markdown-editor').value;
    const htmlOutput = marked(markdownText); // Convert markdown to HTML using the custom renderer
    document.getElementById('markdown-output').innerHTML = htmlOutput; // Display the HTML
  });
}

// Handle the display of markdown content in the feed
function convertMarkdownInElements(selector) {
  const markdownElements = document.querySelectorAll(selector);
  console.log(`Found ${markdownElements.length} markdown elements in selector "${selector}"`);

  markdownElements.forEach(function(element) {
    const markdownText = element.textContent.trim();
    const htmlContent = marked(markdownText);
    element.innerHTML = htmlContent;
  });
}

// Handle Markdown rendering for the Feed page
document.addEventListener('DOMContentLoaded', function() {
  // This will be used for new, edit post pages to output a preview of the markdown
  convertMarkdownInElements('.markdown-output');

  // This will be used for the feed page to render the markdown content
  convertMarkdownInElements('.post-content');